Создаем новый эндпоинт для выставления рейтинга
Добавление эндпоинта в контроллеры

def upvote
end

Прописываем роут

было
Rails.application.routes.draw do
 resources :items 
end

стало
Rails.application.routes.draw do
 resources :items do
    get :upvote, on: :member   (метод get, название нашего метода, доступ к url с помощью member для одного объекта)
 end
end

еще вариант
Rails.application.routes.draw do
 resources :items do
    get :upvote, on: : collection   (метод get, название нашего метода, доступ к url с помощью collection для всех объектов)
 end
end


Создаем новую миграцию
rails g migration add_votes_count_to_items

В ней прописываем(создаем новую колонку)
def change
    add_column table_name :items, column_name :votes_count, type :integer, default: 0
end

Запустим миграцию
bundle exec rake db:migrate && rake db:migrate RAILS_ENV=test

В before action добавляем upvote (что бы был доступен item c id-шником)
before_action :find_item, only: %i[show edit update destroy upvote]


В метод добавим
def upvote
  @item.increment! :votes_count (увеличим на еденицу данное поле)
  redirect_to items_path (редирект на индексную страницу)
end

админ всегда
def admin?
  true
  #render json: 'Access denied', status: :forbidden unless params[:admin]
end


Меняем index
<h2 style="color: #B00100; margin: 0 auto">all items</h2><br/>

<table>
    <tr>
      <th>Id</th>
      <th>Name</th>
      <th>Price</th>
      <th>Description</th>
      <th>Rating</th>
      <th>Delete</th>
    </tr>
  <% @items.each do |item| %>
    <tr>
      <td><%= item.id %></td>
      <td><%= link_to item.name, item_path(item) %></td>
      <td><%= item.price %></td>
      <td><%= item.description %></td>
      <td><%= item.votes_count %>, <%= link_to '+', upvote_item_path(item) %></td>
      <td><%= button_to 'delete', item_path(item), method: :delete %></td>
  </tr>
<% end %>
</table>
<br/>
<%= link_to 'new item', new_item_path %>
<br/>
<%= link_to 'only expensive', expensive_items_path %>


Выводим продукты по рейтингу в цене
добавляем эндпоинт

def expensive
  @items = Item.where('price > 50') (используется интерполяция)
  render :index        (без этой строчки он бы пытался отрендерить шаблон expensive которого не существует)
end


добавляем новый роут collection
Rails.application.routes.draw do

  resources :items do
    get :upvote,    on: :member
    get :expensive, on: :collection
  end
end


