

2
Создание приложения с postgresql
Настраиваем БД
Управление БД
Назначение папок rails
Остановить rails server процесс
Статус postgresql (работает не работает)

3
Генерация модели с именем item
(создаются миграции(таблицы) и модели)
Создаем таблицу в миграции для базы данных
Создаем таблицы для тестов
В файле schema.rb находятся все таблицы

4
Добавляем удаляем колонки в таблице 3 способа
Создаем новую миграцию(таблицу)
Добавляем в миграцию колонки
Откат миграции
Способ изменить таблицу
Добавляем индексы(оптимизация поиска)
Делаем миграцию тестовой базы данных

5
"модели" в этом случае добавляем данные в таблицу с помощью командной строки

6
Валидация в моделе (условия для введения данных)

7
Коллбэки в моделях (делают действие после завершения операции)

8
Пишем начальную страницу(index)
Создаем контроллер, вью(страницу создаем сами), тест, хелпер, ассет(стили)
Пишем index(метод в контроллере(эндпоинт,экшн), роут, вью)

9 
Создаем метод create для добавления данных в базу(метод post)
Используем json 
Отключаем лайаоты
Отключаем токен
private Добавляем приватный метод(params(ы)) для безопасности!!! базы данных
Добавляем данные в базу через командную строку методом POST

10
Модель в ед.числе(item) + контроллер в мн.числе(items) = REST ful
Создаем вьюху-форму(new) для заполнения данных

11
Создаем метод show
Создаем вью show
Обрабатываем исключения если нету id(шника)
Делаем вью index(items)которая открывает show


12
Создаем
destroy
edit
update

13
Отличие render от redirect_to
Редиреке перенапрвляет, рендер отображает

14 
Кнопка для добавления данных(на index)
Кнопка для редактирования(на show)
кнопка для перехода на index(на show)
кнопка для удаления данных(на show)


15
Убираем повторения в коде
Редактировать данные может только админ
Затронута тема params

Callback
before_action
after_action


16
Создаем новый эндпоинт для выставления рейтинга
Прописываем роут для доступа к одному объекту :member
Создаем новую миграцию
Временно комментируем Callback admin (admin  true(всегда))
Меняем верстку index
Выводим продукты по рейтингу в цене
добавляем эндпоинт
добавляем новый роут для всех объектов :collection


17
Application Controller 
контроллер от которого наследую все контроллеры

убираем повторения
def render_404
def render_403

Кнопка button_to, обрабатываем методом get


18
Настройки конфигурации разработки
Настройки всего приложения
Rspec
Pry


19
Ассоциация has_one & belongs_to
Юзер может иметь одну корзину, одна корзина будет принадлежать одному юзеру
Генерируем модель user
Генерируем модель cart
Миграция user
Миграция cart
Запускаем тесты Rspec



20
Ассоциация has_many & belongs_to
Ордер принадлежит одному юзеру, но юзер может иметь много ордеров
Создаем модель, миграцию order
Создаем заказ и ложим в корзину


21
Ассоциация has_and_belongs_to_many
Один и тот же товар может находится в разных карзинах(создает лишние ячейки в таблице)
Создадим таблицу join_table без id(без модели)


22
Ассоциация has_many :through
Количество единиц товара в одной корзине
###
Убираем шапку когда нету таблицы
Отладка(pry)

Удаляем ненужную таблицу(убираем связь has_and_belongs_to_many )
Создаем связанную таблицу с id(с моделью)


23
Полиморфные ассоциации
(Создавать комментарии для товаров(item) и блога одним пользователем)


24
Паршиалы
Позволяет не дублировать одинаковй код на страницах


25
Хэлперы
Специальные классы хранящиеся в папке helpers
Хелперы существую для того что бы вних содержались методы
доступные в других классах
В нашем случае преабразуем ссылку в картинку!
Добавляем код для отабражения окна description
Подключаем description в items_controller
Делаем сортировку товара(чтобы не прыгали строки в таблице)!
git status  измененные файлы
Использование binding.pry
Подключаем хелпер


26 Лайауты
Макет определяет окружение HTML-страницы.
Это место, где можно определить общий вид вашего окончательного результата.
Файлы макета находятся в app / views / layouts.

Сгенерируем новый контроллер admin
Сколько пользователей сохранено в базе данных
Для отображения индекс сразу(без загрузки нач. стр. rails)
Создаем лайаут admin, подключаем его admin_controller
Сделаем лайаут для одного метода


27
Запросы ActiveRecord, .where
работа с условием where(ограничивает выборку)


28
Запросы ActiveRecord, order и limit
работа с order(сортировка по параметрам) и limit(вывести определенное количество товаров)


29
Цепочка из методов where
Get запросы из строки браузера
Код выполнится в том случае если будет price_from(цена введенная в браузере(?price_from=55)), иначе мы его отсортируем(выводит список товара если не задоно условие по цене, если по цене выводит цену)

Вывести объекты которые были созданы сегодня
Вывести объекты по рейтингу


30
Eager loading(жадная загрузка)
Сгенерируем новую модель
Полиморфная ассоциация
Используем стили items.scss
Используем хелпер image_tag, для отображения рисунков из папки
Удалим ненужную колонку item_id в таблице image
! Уменьшаем число запросов в базу данных до одного(жадная загрузка)


31-32
объект flash
В методах
create, apdate, destroy
при создании удалении объектов(товаров)выводит сообщение об успешном
или неуспешном выполнении операции


33
gem 'haml-rails'
язык разметки для упрощённой генерации HTML


34 
Устанавливаем Bootstrap с помощью Вебпака


35
gem simple form
'cохранение' поля что бы они не пропадали при сохранении если др. поля не заполнены
стронг параметры(добавление не хеша, а таблица, (создаkи метод new))
стиль bootstrape


36
интернационализация i18n
перевод сайта


37
тестирование моделей, Rspec
gem 'shoulda-matchers' 
тест на валидацию и связи


38
Factory Bot ч.1
gem 'factory_bot' (упрощает тестирование)


39
Factory Bot ч.2
используем фабрики

40
gem 'faker'
протестировать тот или иной участок кода,
используя данные,
максимально похожие на реальные,
генерирует эти данные 'faker'
при тестировании берем фейковые данные из
фабрики
binding.pry

41
тестирование контроллеров
смотрим видео

42
Ajax запросы, jQuery
jquery библиотека javascript
см.видео 42
удаление товара с пом. Ajax




